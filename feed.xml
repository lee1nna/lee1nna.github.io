<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lee1nna.github.io/</id><title>Leehanna's blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-02-21T23:58:28+09:00</updated> <author> <name>Hanna Lee</name> <uri>https://lee1nna.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://lee1nna.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://lee1nna.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Hanna Lee </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Typescript] 타입 별칭(Alias)과 인터페이스(Interface)</title><link href="https://lee1nna.github.io/posts/TS-Type-Alias-Interface/" rel="alternate" type="text/html" title="[Typescript] 타입 별칭(Alias)과 인터페이스(Interface)" /><published>2023-02-21T00:00:00+09:00</published> <updated>2023-02-21T00:00:00+09:00</updated> <id>https://lee1nna.github.io/posts/TS-Type-Alias-Interface/</id> <content src="https://lee1nna.github.io/posts/TS-Type-Alias-Interface/" /> <author> <name>Hanna Lee</name> </author> <category term="Typescript" /> <summary> 이번 글에서는 타입스크립트에 유사한 타입 별칭과 인터페이스에 대해 알아보고 그 둘의 차이점에 대해 알아보자. 타입 별칭 (Type Alias) 타입 별칭은 새로운 타입을 생성한다는 개념이라기 보다는 정의한 타입에 대해 쉽게 참고할 수 있도록 이름을 부여한 것이다. 타입 별칭은 type 키워드를 사용하여 선언할 수 있다. type Person = { name: string, age: number } 타입 별칭을 타입으로 지정해둔 변수의 타입에 마우스를 올리면 Vscode 개발툴에서는 다음과 같이 보여준다. 인터페이스 (Interface) 타입 인터페이스는 여러가지 타입을 갖는 프로퍼티로 이루어진 새로운 타입을 정의하는 것과 유사하다 인터페이스는 interface 키워드를 사용... </summary> </entry> <entry><title>[Vue] store와 vuex는 무엇인가?</title><link href="https://lee1nna.github.io/posts/Vue-store-basic/" rel="alternate" type="text/html" title="[Vue] store와 vuex는 무엇인가?" /><published>2022-12-22T00:00:00+09:00</published> <updated>2022-12-22T00:00:00+09:00</updated> <id>https://lee1nna.github.io/posts/Vue-store-basic/</id> <content src="https://lee1nna.github.io/posts/Vue-store-basic/" /> <author> <name>Hanna Lee</name> </author> <category term="FE 지식" /> <summary> Vue에서 상태관리에 필수적인 store에 대해 알아보자. store와 vuex store는 애플리케이션 전역에서 접근 가능한 중앙 집중식 데이터 저장소이다. 한마디로 API를 통해 받은 데이터와 컴포넌트를 제어하는 값들을 한 곳에서 관리하려고 만든 구조이다. store는 데이터의 흐름을 단방향으로 제어한다. vuex는 vue의 상태관리 라이브러리이다. vuex가 각각의 컴포넌트에 사용되어야 할 상태를 관리하고 이 상태는 트리 구조의 root처럼 모든 상태의 값을 관리한다. store의 기본 구조 store는 다음과 같이 4가지의 구조를 가진다. state : 변수들의 집합, 변수 정의부 mutations : 동기적으로 변수 재정의, 조작, 값 대입 등 변화를 주는 조작부 ... </summary> </entry> <entry><title>[React + Webpack] 웹팩 세팅 + 빌드하기</title><link href="https://lee1nna.github.io/posts/React-Webpack-Setting/" rel="alternate" type="text/html" title="[React + Webpack] 웹팩 세팅 + 빌드하기" /><published>2022-11-09T00:00:00+09:00</published> <updated>2022-11-09T00:00:00+09:00</updated> <id>https://lee1nna.github.io/posts/React-Webpack-Setting/</id> <content src="https://lee1nna.github.io/posts/React-Webpack-Setting/" /> <author> <name>Hanna Lee</name> </author> <category term="React" /> <summary> 프로젝트 파일 들어가서 npm init 실행하면 package.json 파일 생성 npm react react-dom npm i -D webpack webpack-cli npm i -D babel-loader @babel/core npm i -D @babel/preset-env npm i -D @babel/preset-react 프로젝트 폴더에 webpack.config.js 파일 추가 // webpack.config.js const path = require('path'); module.exports = { mode:'development', devtool: 'eval', // 개발일 땐 eval, 프로덕션일 땐 hidden-source-map ... </summary> </entry> <entry><title>[Javascript] HashMap - Map 객체</title><link href="https://lee1nna.github.io/posts/Hash-Map/" rel="alternate" type="text/html" title="[Javascript] HashMap - Map 객체" /><published>2022-10-12T00:00:00+09:00</published> <updated>2022-10-12T00:00:00+09:00</updated> <id>https://lee1nna.github.io/posts/Hash-Map/</id> <content src="https://lee1nna.github.io/posts/Hash-Map/" /> <author> <name>Hanna Lee</name> </author> <category term="Javascript" /> <summary> 해시테이블 (Hash Table) 자료 구조의 종류 중 하나로 key와 value를 가지는 자료구조 형태이다. 배열은 key값에 숫자만 가능하지만, hash table에서는 문자열 또한 key값이 가능하다. hash function을 통해 빠른 탐색O(1)이 가능하다. 해시 함수 (Hash function) key와 연결되어 있는 value를 삽입, 삭제, 탐색하는 알고리즘 함수이다. key가 들어오면 random하게 주소값을 생성한 후, 해당 주소값에 key와 value를 저장한다. javascript에서 해시테이블은 대표적으로 Object, Map, Set이 있다. JS에서 key-value로 이루어진 자료구조는 Object가 대표적이었지만, ES6에서 Map과 Set이 추가되었다. ... </summary> </entry> <entry><title>[Nuxt + Typescript] 카카오톡 공유하기 sdk 사용하기</title><link href="https://lee1nna.github.io/posts/Nuxt-Kakao-Share/" rel="alternate" type="text/html" title="[Nuxt + Typescript] 카카오톡 공유하기 sdk 사용하기" /><published>2022-09-28T00:00:00+09:00</published> <updated>2022-09-28T00:00:00+09:00</updated> <id>https://lee1nna.github.io/posts/Nuxt-Kakao-Share/</id> <content src="https://lee1nna.github.io/posts/Nuxt-Kakao-Share/" /> <author> <name>Hanna Lee</name> </author> <category term="Typescript" /> <summary> 카카오톡에서는 다양한 기능의 sdk를 제공한다. 이번 포스팅에서는 그 중에서 카카오톡 공유하기 sdk를 nuxt 환경에서 어떻게 사용할 수 있는 지 순서대로 알아보자! 참고로 나는 nuxt2 + composition API + typescript 환경에서 진행했다. 1. 애플리케이션 등록 먼저 카카오톡 sdk 를 사용하기 위해서는 카카오톡 개발자 홈페이지에서 애플리케이션을 등록해야 한다. 로그인 후 애플리케이션 추가하기를 통해 애플리케이션 등록을 할 수 있다. 애플리케이션 등록 후에는 위와 같이 앱 정보를 확인할 수 있다. 나는 웹 플랫폼에서 sdk를 사용할거기 때문에 Javascript 키가 꼭 필요하다! 2. 웹 플랫폼 등록 이제 웹 플랫폼을 등록해보자. 웹 플랫폼은 아래 사진에서 ... </summary> </entry> </feed>
